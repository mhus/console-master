<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/demo/src/main/java/com/consolemaster/demo/RaycastingDemo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/demo/src/main/java/com/consolemaster/demo/RaycastingDemo.java" />
              <option name="originalContent" value="package com.consolemaster.demo;&#10;&#10;import com.consolemaster.AnsiColor;&#10;import com.consolemaster.BorderLayout;&#10;import com.consolemaster.Box;&#10;import com.consolemaster.Composite;&#10;import com.consolemaster.DefaultBorder;&#10;import com.consolemaster.KeyEvent;&#10;import com.consolemaster.PositionConstraint;&#10;import com.consolemaster.ProcessLoop;&#10;import com.consolemaster.ScreenCanvas;&#10;import com.consolemaster.Text;&#10;import com.consolemaster.raycasting.RaycastingCanvas;&#10;import com.consolemaster.raycasting.DefaultMapProvider;&#10;import com.consolemaster.raycasting.MapProvider;&#10;import com.consolemaster.raycasting.EntryInfo;&#10;import com.consolemaster.raycasting.PictureTextureProvider;&#10;import com.consolemaster.raycasting.RegistryTextureProvider;&#10;import com.consolemaster.raycasting.TilingTextureProvider;&#10;import lombok.extern.slf4j.Slf4j;&#10;&#10;import java.io.IOException;&#10;&#10;/**&#10; * Interactive raycasting demo showcasing first-person 3D perspective in a 2D world.&#10; * Features player movement, rotation, and different map environments using MapProvider.&#10; */&#10;@Slf4j&#10;public class RaycastingDemo {&#10;&#10;    private static String lastAction = &quot;Demo Started&quot;;&#10;    private static RaycastingCanvas raycastingCanvas;&#10;    private static int currentMapIndex = 0;&#10;    private static char[] wallEdgeStyles = {'│', '#', '*', '+'};&#10;    private static int currentWallEdgeStyleIndex = 0;&#10;&#10;    // Different map providers to showcase&#10;    private static final MapProvider[] MAP_PROVIDERS = {&#10;        // Simple map with basic walls and floors&#10;        new DefaultMapProvider(&quot;Simple Maze&quot;, new String[]{&#10;            &quot;########&quot;,&#10;            &quot;#      #&quot;,&#10;            &quot;#  ##  #&quot;,&#10;            &quot;#      #&quot;,&#10;            &quot;########&quot;&#10;        }),&#10;&#10;        // Advanced map with different EntryInfo types&#10;        createAdvancedMapProvider(),&#10;&#10;        // Textured map with various textures&#10;        createTexturedMapProvider(),&#10;&#10;        // Tiling texture demonstration map&#10;        createTilingTextureMapProvider(),&#10;&#10;        // Complex maze map&#10;        new DefaultMapProvider(&quot;Complex Maze&quot;, new String[]{&#10;            &quot;################&quot;,&#10;            &quot;#              #&quot;,&#10;            &quot;# #### ## #### #&quot;,&#10;            &quot;#    #    #    #&quot;,&#10;            &quot;#### # ## # ####&quot;,&#10;            &quot;#              #&quot;,&#10;            &quot;# ## #### ## # #&quot;,&#10;            &quot;#  #      #  # #&quot;,&#10;            &quot;## # #### # ####&quot;,&#10;            &quot;#              #&quot;,&#10;            &quot;################&quot;&#10;        }),&#10;&#10;        // Natural landscape with water and grass&#10;        createNaturalLandscapeProvider(),&#10;&#10;        // Castle dungeon with mixed entry types&#10;        createCastleMapProvider()&#10;    };&#10;&#10;    /**&#10;     * Creates an advanced map provider showcasing different EntryInfo features.&#10;     */&#10;    private static MapProvider createAdvancedMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[8][12];&#10;&#10;        // Initialize with different floor types&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                if ((x + y) % 3 == 0) {&#10;                    // Stone floor&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('.')&#10;                            .name(&quot;Stone Floor&quot;)&#10;                            .colorLight(AnsiColor.WHITE)&#10;                            .colorDark(AnsiColor.BRIGHT_BLACK)&#10;                            .height(0.0)&#10;                            .build();&#10;                } else if ((x + y) % 3 == 1) {&#10;                    // Grass floor&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character(',')&#10;                            .name(&quot;Grass Floor&quot;)&#10;                            .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                            .colorDark(AnsiColor.GREEN)&#10;                            .height(0.0)&#10;                            .build();&#10;                } else {&#10;                    // Sand floor&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('°')&#10;                            .name(&quot;Sand Floor&quot;)&#10;                            .colorLight(AnsiColor.BRIGHT_YELLOW)&#10;                            .colorDark(AnsiColor.YELLOW)&#10;                            .height(0.0)&#10;                            .build();&#10;                }&#10;            }&#10;        }&#10;&#10;        // Create walls around the border using stone walls&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add some glass walls (transparent but blocking)&#10;        map[2][3] = EntryInfo.createGlass();&#10;        map[2][4] = EntryInfo.createGlass();&#10;        map[2][5] = EntryInfo.createGlass();&#10;&#10;        // Add low walls (half height)&#10;        map[4][2] = EntryInfo.createLowWall();&#10;        map[4][3] = EntryInfo.createLowWall();&#10;        map[5][2] = EntryInfo.createLowWall();&#10;        map[5][3] = EntryInfo.createLowWall();&#10;&#10;        // Add brick walls with proper light/dark colors&#10;        map[3][7] = EntryInfo.createBrickWall();&#10;        map[3][8] = EntryInfo.createBrickWall();&#10;        map[4][7] = EntryInfo.createBrickWall();&#10;        map[4][8] = EntryInfo.createBrickWall();&#10;&#10;        // Add metal walls&#10;        map[6][7] = EntryInfo.createMetalWall();&#10;        map[6][8] = EntryInfo.createMetalWall();&#10;&#10;        // Add custom colored walls with specific light/dark combinations&#10;        EntryInfo greenWall = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('█')&#10;                .name(&quot;Green Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                .colorDark(AnsiColor.GREEN)&#10;                .height(1.0)&#10;                .build();&#10;&#10;        EntryInfo purpleWall = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▓')&#10;                .name(&quot;Purple Wall&quot;)&#10;                .colorLight(AnsiColor.MAGENTA)&#10;                .colorDark(AnsiColor.BRIGHT_MAGENTA)&#10;                .height(1.2)&#10;                .build();&#10;&#10;        map[6][4] = greenWall;&#10;        map[6][5] = greenWall;&#10;        map[5][9] = purpleWall;&#10;        map[6][9] = purpleWall;&#10;&#10;        // Add water area (blue floor)&#10;        EntryInfo water = EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character('~')&#10;                .name(&quot;Water&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_CYAN)&#10;                .colorDark(AnsiColor.CYAN)&#10;                .height(0.0)&#10;                .build();&#10;&#10;        map[3][9] = water;&#10;        map[3][10] = water;&#10;        map[4][9] = water;&#10;        map[4][10] = water;&#10;&#10;        return new DefaultMapProvider(&quot;Advanced Features&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a castle map with various EntryInfo types.&#10;     */&#10;    private static MapProvider createCastleMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[12][16];&#10;&#10;        // Initialize with floors&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.createFloor();&#10;            }&#10;        }&#10;&#10;        // Create outer walls with stone&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add castle features with enhanced colors&#10;        EntryInfo tower = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('♦')&#10;                .name(&quot;Tower&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_WHITE)&#10;                .colorDark(AnsiColor.WHITE)&#10;                .height(1.5)&#10;                .build();&#10;&#10;        EntryInfo gate = EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character('|')&#10;                .name(&quot;Gate&quot;)&#10;                .colorLight(AnsiColor.YELLOW)&#10;                .colorDark(AnsiColor.BRIGHT_YELLOW)&#10;                .height(0.8)&#10;                .build();&#10;&#10;        EntryInfo courtyard = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▒')&#10;                .name(&quot;Courtyard Wall&quot;)&#10;                .colorLight(AnsiColor.CYAN)&#10;                .colorDark(AnsiColor.BLUE)&#10;                .height(0.7)&#10;                .build();&#10;&#10;        // Place towers&#10;        map[2][2] = tower;&#10;        map[2][13] = tower;&#10;        map[9][2] = tower;&#10;        map[9][13] = tower;&#10;&#10;        // Create gates&#10;        map[5][0] = gate;&#10;        map[6][0] = gate;&#10;&#10;        // Add interior walls with different materials&#10;        for (int x = 4; x &lt; 12; x++) {&#10;            if (x != 7 &amp;&amp; x != 8) { // Leave doorway&#10;                if (x &lt; 8) {&#10;                    map[5][x] = EntryInfo.createBrickWall();&#10;                } else {&#10;                    map[5][x] = EntryInfo.createMetalWall();&#10;                }&#10;            }&#10;        }&#10;&#10;        // Add courtyard walls&#10;        map[7][3] = courtyard;&#10;        map[8][3] = courtyard;&#10;        map[7][12] = courtyard;&#10;        map[8][12] = courtyard;&#10;&#10;        return new DefaultMapProvider(&quot;Castle&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a natural landscape map with water and grass.&#10;     */&#10;    private static MapProvider createNaturalLandscapeProvider() {&#10;        EntryInfo[][] map = new EntryInfo[10][14];&#10;&#10;        // Initialize with grass floor&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character(',')&#10;                        .name(&quot;Grass Floor&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                        .colorDark(AnsiColor.GREEN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Create water areas&#10;        for (int y = 2; y &lt;= 3; y++) {&#10;            for (int x = 4; x &lt;= 9; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character('~')&#10;                        .name(&quot;Water&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_CYAN)&#10;                        .colorDark(AnsiColor.CYAN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Create island with trees&#10;        for (int y = 1; y &lt;= 8; y++) {&#10;            for (int x = 1; x &lt;= 12; x++) {&#10;                if (x == 1 || x == 12 || y == 1 || y == 8) {&#10;                    map[y][x] = EntryInfo.createStoneWall();&#10;                } else if ((x + y) % 4 == 0) {&#10;                    map[y][x] = EntryInfo.createTree();&#10;                }&#10;            }&#10;        }&#10;&#10;        return new DefaultMapProvider(&quot;Natural Landscape&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a textured map provider showcasing various textures.&#10;     */&#10;    private static MapProvider createTexturedMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[10][10];&#10;&#10;        // Initialize with grass texture&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character(',')&#10;                        .name(&quot;Grass&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                        .colorDark(AnsiColor.GREEN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Add stone walls around the border&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add some wooden walls&#10;        for (int i = 2; i &lt; 8; i++) {&#10;            map[i][3] = EntryInfo.createWoodenWall();&#10;            map[i][6] = EntryInfo.createWoodenWall();&#10;        }&#10;&#10;        // Add a water area&#10;        for (int y = 4; y &lt;= 5; y++) {&#10;            for (int x = 1; x &lt;= 8; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character('~')&#10;                        .name(&quot;Water&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_CYAN)&#10;                        .colorDark(AnsiColor.CYAN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        return new DefaultMapProvider(&quot;Textured Map&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a tiling texture map provider showcasing various tiling textures.&#10;     */&#10;    private static MapProvider createTilingTextureMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[12][12];&#10;&#10;        // Initialize with grass texture&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character(',')&#10;                        .name(&quot;Grass&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                        .colorDark(AnsiColor.GREEN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Add stone walls around the border&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Create different sections to showcase tiling textures&#10;&#10;        // Left section: Tiling brick walls&#10;        for (int y = 2; y &lt;= 5; y++) {&#10;            map[y][3] = EntryInfo.createTilingBrickWall();&#10;        }&#10;&#10;        // Right section: Dotted walls&#10;        for (int y = 2; y &lt;= 5; y++) {&#10;            map[y][8] = EntryInfo.createDottedWall();&#10;        }&#10;&#10;        // Center section: Hash pattern walls&#10;        for (int x = 4; x &lt;= 7; x++) {&#10;            map[3][x] = EntryInfo.createHashWall();&#10;        }&#10;&#10;        // Bottom section: Wave pattern walls&#10;        for (int x = 4; x &lt;= 7; x++) {&#10;            map[8][x] = EntryInfo.createWaveWall();&#10;        }&#10;&#10;        // Add some traditional scaling textured walls for comparison&#10;        map[6][3] = EntryInfo.createWoodenWall(); // Uses scaling texture&#10;        map[6][8] = EntryInfo.createBrickWall();  // Uses scaling texture&#10;&#10;        return new DefaultMapProvider(&quot;Tiling Texture Demo&quot;, map);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        try {&#10;            // Create the main screen canvas&#10;            ScreenCanvas screen = new ScreenCanvas(80, 25);&#10;&#10;            // Create main container with BorderLayout&#10;            Composite mainContainer = new Composite(&quot;mainContainer&quot;,&#10;                    screen.getWidth() - 4,&#10;                    screen.getHeight() - 4,&#10;                    new BorderLayout(1));&#10;&#10;            // Create header&#10;            Box headerBox = new Box(&quot;headerBox&quot;, 0, 5, new DefaultBorder());&#10;            Text headerText = new Text(&quot;headerText&quot;, 0, 0,&#10;                &quot;Raycasting Demo - First Person 3D World (MapProvider)\n&quot; +&#10;                &quot;WASD: Move | Arrows: Rotate/Fine Move | M: Change Map | R: Reset\n&quot; +&#10;                &quot;E: Toggle Wall Edges | T: Edge Threshold | C: Edge Style | Q/ESC: Exit&quot;,&#10;                Text.Alignment.CENTER);&#10;            headerText.setForegroundColor(AnsiColor.BRIGHT_CYAN);&#10;            headerText.setBold(true);&#10;            headerBox.setContent(headerText);&#10;            headerBox.setLayoutConstraint(new PositionConstraint(PositionConstraint.Position.TOP_CENTER));&#10;&#10;            // Create raycasting canvas with MapProvider&#10;            raycastingCanvas = new RaycastingCanvas(&quot;Raycasting World&quot;, 0, 0, MAP_PROVIDERS[currentMapIndex]);&#10;            raycastingCanvas.setPlayerPosition(2.5, 2.5);&#10;            raycastingCanvas.setWallColor(AnsiColor.WHITE);&#10;            raycastingCanvas.setFloorColor(AnsiColor.YELLOW);&#10;            raycastingCanvas.setCeilingColor(AnsiColor.BLUE);&#10;            raycastingCanvas.setLayoutConstraint(new PositionConstraint(PositionConstraint.Position.CENTER));&#10;&#10;            // Setup texture provider&#10;            setupTextureProvider(raycastingCanvas);&#10;&#10;            // Create status panel&#10;            Text statusText = new Text(&quot;statusText&quot;, 0, 0, &quot;&quot;, Text.Alignment.LEFT);&#10;            statusText.setForegroundColor(AnsiColor.WHITE);&#10;            Box statusBox = new Box(&quot;statusBox&quot;, 0, 3, new DefaultBorder());&#10;            statusBox.setContent(statusText);&#10;            statusBox.setLayoutConstraint(new PositionConstraint(PositionConstraint.Position.BOTTOM_CENTER));&#10;&#10;            // Add all components to main container&#10;            mainContainer.addChild(headerBox);&#10;            mainContainer.addChild(raycastingCanvas);&#10;            mainContainer.addChild(statusBox);&#10;&#10;            // Position the main container&#10;            screen.setContent(mainContainer);&#10;&#10;            // Register keyboard shortcuts&#10;            registerKeyboardControls(screen);&#10;&#10;            // Create and start the process loop&#10;            ProcessLoop processLoop = new ProcessLoop(screen);&#10;            processLoop.setUpdateCallback(() -&gt; {&#10;                // Update status text with MapProvider information&#10;                statusText.setText(String.format(&#10;                    &quot;Position: (%.1f, %.1f) | Angle: %.0f° | %s | Map: %s (%d/%d)&quot;,&#10;                    raycastingCanvas.getPlayerX(),&#10;                    raycastingCanvas.getPlayerY(),&#10;                    Math.toDegrees(raycastingCanvas.getPlayerAngle()),&#10;                    lastAction,&#10;                    raycastingCanvas.getMapProvider().getName(),&#10;                    currentMapIndex + 1,&#10;                    MAP_PROVIDERS.length&#10;                ));&#10;            });&#10;&#10;            log.info(&quot;Starting Raycasting Demo with MapProvider...&quot;);&#10;            processLoop.start();&#10;&#10;        } catch (IOException e) {&#10;            log.error(&quot;Error initializing Raycasting Demo&quot;, e);&#10;        }&#10;    }&#10;&#10;    private static void registerKeyboardControls(ScreenCanvas screen) {&#10;        double moveSpeed = 0.1;&#10;        double rotateSpeed = 0.1;&#10;&#10;        // Movement controls&#10;        screen.registerShortcut(&quot;W&quot;, () -&gt; {&#10;            raycastingCanvas.movePlayer(moveSpeed);&#10;            lastAction = &quot;Move Forward&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;S&quot;, () -&gt; {&#10;            raycastingCanvas.movePlayer(-moveSpeed);&#10;            lastAction = &quot;Move Backward&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;A&quot;, () -&gt; {&#10;            raycastingCanvas.strafePlayer(-moveSpeed);&#10;            lastAction = &quot;Strafe Left&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;D&quot;, () -&gt; {&#10;            raycastingCanvas.strafePlayer(moveSpeed);&#10;            lastAction = &quot;Strafe Right&quot;;&#10;        });&#10;&#10;        // Rotation controls&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_LEFT.name(), () -&gt; {&#10;            raycastingCanvas.rotatePlayer(-rotateSpeed);&#10;            lastAction = &quot;Rotate Left&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_RIGHT.name(), () -&gt; {&#10;            raycastingCanvas.rotatePlayer(rotateSpeed);&#10;            lastAction = &quot;Rotate Right&quot;;&#10;        });&#10;&#10;        // Wall edge controls&#10;        screen.registerShortcut(&quot;E&quot;, () -&gt; {&#10;            raycastingCanvas.setDrawWallEdges(!raycastingCanvas.isDrawWallEdges());&#10;            lastAction = &quot;Wall Edges toggled&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;T&quot;, () -&gt; {&#10;            raycastingCanvas.setWallEdgeThreshold(&#10;                raycastingCanvas.getWallEdgeThreshold() + 0.1 &gt; 1.0 ? 0.0 : raycastingCanvas.getWallEdgeThreshold() + 0.1&#10;            );&#10;            lastAction = &quot;Edge Threshold changed&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;C&quot;, () -&gt; {&#10;            currentWallEdgeStyleIndex = (currentWallEdgeStyleIndex + 1) % wallEdgeStyles.length;&#10;            raycastingCanvas.setWallEdgeChar(wallEdgeStyles[currentWallEdgeStyleIndex]);&#10;            lastAction = &quot;Edge Character changed&quot;;&#10;        });&#10;&#10;        // Map change - now uses MapProvider&#10;        screen.registerShortcut(&quot;M&quot;, () -&gt; {&#10;            currentMapIndex = (currentMapIndex + 1) % MAP_PROVIDERS.length;&#10;            raycastingCanvas.setMapProvider(MAP_PROVIDERS[currentMapIndex]);&#10;            raycastingCanvas.setPlayerPosition(2.5, 2.5);&#10;            lastAction = &quot;Changed to &quot; + MAP_PROVIDERS[currentMapIndex].getName();&#10;        });&#10;&#10;        // Reset player&#10;        screen.registerShortcut(&quot;R&quot;, () -&gt; {&#10;            raycastingCanvas.setPlayerPosition(2.5, 2.5);&#10;            raycastingCanvas.setPlayerAngle(0.0);&#10;            lastAction = &quot;Player Reset&quot;;&#10;        });&#10;&#10;        // Fine movement controls&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_UP.name(), () -&gt; {&#10;            raycastingCanvas.movePlayer(moveSpeed * 0.5);&#10;            lastAction = &quot;Move Forward (Slow)&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_DOWN.name(), () -&gt; {&#10;            raycastingCanvas.movePlayer(-moveSpeed * 0.5);&#10;            lastAction = &quot;Move Backward (Slow)&quot;;&#10;        });&#10;&#10;        // Exit&#10;        screen.registerShortcut(&quot;Q&quot;, () -&gt; {&#10;            log.info(&quot;Exiting Raycasting Demo...&quot;);&#10;            System.exit(0);&#10;        });&#10;&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ESCAPE.name(), () -&gt; {&#10;            log.info(&quot;Exiting Raycasting Demo...&quot;);&#10;            System.exit(0);&#10;        });&#10;    }&#10;&#10;    private static Box createControlButton(String text, AnsiColor color, Runnable action) {&#10;        Text buttonText = new Text(&quot;buttonText&quot;, 0, 0, text, Text.Alignment.CENTER);&#10;        buttonText.setForegroundColor(color);&#10;        buttonText.setBold(true);&#10;&#10;        Box button = new Box(&quot;button&quot;, 12, 3, new DefaultBorder());&#10;        button.setContent(buttonText);&#10;&#10;        return button;&#10;    }&#10;&#10;    /**&#10;     * Sets up the texture provider for the raycasting canvas.&#10;     */&#10;    private static void setupTextureProvider(RaycastingCanvas canvas) {&#10;        // Create a picture texture provider with various textures (scaling)&#10;        PictureTextureProvider pictureProvider = new PictureTextureProvider();&#10;&#10;        // Create a tiling texture provider with repeating patterns&#10;        TilingTextureProvider tilingProvider = new TilingTextureProvider();&#10;&#10;        // Add wood texture (scaling)&#10;        String[] woodTexture = {&#10;            &quot;|||###|||&quot;,&#10;            &quot;###|||###&quot;,&#10;            &quot;|||###|||&quot;,&#10;            &quot;###|||###&quot;,&#10;            &quot;|||###|||&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;wood&quot;, woodTexture);&#10;&#10;        // Add brick texture (scaling)&#10;        String[] brickTexture = {&#10;            &quot;##  ##  ##&quot;,&#10;            &quot;  ##  ##  &quot;,&#10;            &quot;##  ##  ##&quot;,&#10;            &quot;  ##  ##  &quot;,&#10;            &quot;##  ##  ##&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;brick&quot;, brickTexture);&#10;&#10;        // Add stone texture (scaling)&#10;        String[] stoneTexture = {&#10;            &quot;█▓▒░░▒▓█&quot;,&#10;            &quot;▓▒░  ░▒▓&quot;,&#10;            &quot;▒░    ░▒&quot;,&#10;            &quot;░      ░&quot;,&#10;            &quot;▒░    ░▒&quot;,&#10;            &quot;▓▒░  ░▒▓&quot;,&#10;            &quot;█▓▒░░▒▓█&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;stone&quot;, stoneTexture);&#10;&#10;        // Add metal texture (scaling)&#10;        String[] metalTexture = {&#10;            &quot;========&quot;,&#10;            &quot;||||||||&quot;,&#10;            &quot;--------&quot;,&#10;            &quot;||||||||&quot;,&#10;            &quot;========&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;metal&quot;, metalTexture);&#10;&#10;        // Add tiling patterns that look better when repeated&#10;        String[] tilingBrickPattern = {&#10;            &quot;██  ██&quot;,&#10;            &quot;  ██  &quot;,&#10;            &quot;██  ██&quot;&#10;        };&#10;        tilingProvider.addTexture(&quot;tiling_brick&quot;, tilingBrickPattern);&#10;&#10;        String[] tilingDotPattern = {&#10;            &quot;• &quot;,&#10;            &quot; •&quot;&#10;        };&#10;        tilingProvider.addTexture(&quot;tiling_dots&quot;, tilingDotPattern);&#10;&#10;        String[] tilingHashPattern = {&#10;            &quot;# &quot;,&#10;            &quot; #&quot;&#10;        };&#10;        tilingProvider.addTexture(&quot;tiling_hash&quot;, tilingHashPattern);&#10;&#10;        String[] tilingWavePattern = {&#10;            &quot;~~~~&quot;,&#10;            &quot;    &quot;,&#10;            &quot;~~~~&quot;,&#10;            &quot;    &quot;&#10;        };&#10;        tilingProvider.addTexture(&quot;tiling_waves&quot;, tilingWavePattern);&#10;&#10;        // Create registry provider and add both providers&#10;        RegistryTextureProvider registryProvider = new RegistryTextureProvider();&#10;        registryProvider.addProvider(pictureProvider);  // Scaling textures first&#10;        registryProvider.addProvider(tilingProvider);   // Tiling textures second&#10;&#10;        // Set the texture provider&#10;        canvas.setTextureProvider(registryProvider);&#10;&#10;        log.info(&quot;Texture provider set up with {} scaling textures and {} tiling textures&quot;,&#10;                pictureProvider.getTexturePaths().length,&#10;                tilingProvider.getTexturePaths().length);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.consolemaster.demo;&#10;&#10;import com.consolemaster.AnsiColor;&#10;import com.consolemaster.BorderLayout;&#10;import com.consolemaster.Box;&#10;import com.consolemaster.Composite;&#10;import com.consolemaster.DefaultBorder;&#10;import com.consolemaster.KeyEvent;&#10;import com.consolemaster.PositionConstraint;&#10;import com.consolemaster.ProcessLoop;&#10;import com.consolemaster.ScreenCanvas;&#10;import com.consolemaster.Text;&#10;import com.consolemaster.raycasting.RaycastingCanvas;&#10;import com.consolemaster.raycasting.DefaultMapProvider;&#10;import com.consolemaster.raycasting.MapProvider;&#10;import com.consolemaster.raycasting.EntryInfo;&#10;import com.consolemaster.raycasting.PictureTextureProvider;&#10;import com.consolemaster.raycasting.RegistryTextureProvider;&#10;import com.consolemaster.raycasting.TilingTextureProvider;&#10;import lombok.extern.slf4j.Slf4j;&#10;&#10;import java.io.IOException;&#10;&#10;/**&#10; * Interactive raycasting demo showcasing first-person 3D perspective in a 2D world.&#10; * Features player movement, rotation, and different map environments using MapProvider.&#10; */&#10;@Slf4j&#10;public class RaycastingDemo {&#10;&#10;    private static String lastAction = &quot;Demo Started&quot;;&#10;    private static RaycastingCanvas raycastingCanvas;&#10;    private static int currentMapIndex = 0;&#10;    private static final char[] wallEdgeStyles = {'│', '#', '*', '+'};&#10;    private static int currentWallEdgeStyleIndex = 0;&#10;&#10;    // Different map providers to showcase&#10;    private static final MapProvider[] MAP_PROVIDERS = {&#10;        // Simple map with basic walls and floors&#10;        new DefaultMapProvider(&quot;Simple Maze&quot;, new String[]{&#10;            &quot;########&quot;,&#10;            &quot;#      #&quot;,&#10;            &quot;#  ##  #&quot;,&#10;            &quot;#      #&quot;,&#10;            &quot;########&quot;&#10;        }),&#10;&#10;        // Advanced map with different EntryInfo types&#10;        createAdvancedMapProvider(),&#10;&#10;        // Textured map with various textures&#10;        createTexturedMapProvider(),&#10;&#10;        // Tiling texture demonstration map&#10;        createTilingTextureMapProvider(),&#10;&#10;        // Complex maze map&#10;        new DefaultMapProvider(&quot;Complex Maze&quot;, new String[]{&#10;            &quot;################&quot;,&#10;            &quot;#              #&quot;,&#10;            &quot;# #### ## #### #&quot;,&#10;            &quot;#    #    #    #&quot;,&#10;            &quot;#### # ## # ####&quot;,&#10;            &quot;#              #&quot;,&#10;            &quot;# ## #### ## # #&quot;,&#10;            &quot;#  #      #  # #&quot;,&#10;            &quot;## # #### # ####&quot;,&#10;            &quot;#              #&quot;,&#10;            &quot;################&quot;&#10;        }),&#10;&#10;        // Natural landscape with water and grass&#10;        createNaturalLandscapeProvider(),&#10;&#10;        // Castle dungeon with mixed entry types&#10;        createCastleMapProvider(),&#10;&#10;        // Floor texture demonstration map&#10;        createFloorTextureMapProvider(),&#10;&#10;        // Checkerboard floor pattern map&#10;        createCheckerboardFloorMapProvider()&#10;    };&#10;&#10;    /**&#10;     * Creates an advanced map provider showcasing different EntryInfo features.&#10;     */&#10;    private static MapProvider createAdvancedMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[8][12];&#10;&#10;        // Initialize with different floor types&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                if ((x + y) % 3 == 0) {&#10;                    // Stone floor&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('.')&#10;                            .name(&quot;Stone Floor&quot;)&#10;                            .colorLight(AnsiColor.WHITE)&#10;                            .colorDark(AnsiColor.BRIGHT_BLACK)&#10;                            .height(0.0)&#10;                            .build();&#10;                } else if ((x + y) % 3 == 1) {&#10;                    // Grass floor&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character(',')&#10;                            .name(&quot;Grass Floor&quot;)&#10;                            .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                            .colorDark(AnsiColor.GREEN)&#10;                            .height(0.0)&#10;                            .build();&#10;                } else {&#10;                    // Sand floor&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('°')&#10;                            .name(&quot;Sand Floor&quot;)&#10;                            .colorLight(AnsiColor.BRIGHT_YELLOW)&#10;                            .colorDark(AnsiColor.YELLOW)&#10;                            .height(0.0)&#10;                            .build();&#10;                }&#10;            }&#10;        }&#10;&#10;        // Create walls around the border using stone walls&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add some glass walls (transparent but blocking)&#10;        map[2][3] = EntryInfo.createGlass();&#10;        map[2][4] = EntryInfo.createGlass();&#10;        map[2][5] = EntryInfo.createGlass();&#10;&#10;        // Add low walls (half height)&#10;        map[4][2] = EntryInfo.createLowWall();&#10;        map[4][3] = EntryInfo.createLowWall();&#10;        map[5][2] = EntryInfo.createLowWall();&#10;        map[5][3] = EntryInfo.createLowWall();&#10;&#10;        // Add brick walls with proper light/dark colors&#10;        map[3][7] = EntryInfo.createBrickWall();&#10;        map[3][8] = EntryInfo.createBrickWall();&#10;        map[4][7] = EntryInfo.createBrickWall();&#10;        map[4][8] = EntryInfo.createBrickWall();&#10;&#10;        // Add metal walls&#10;        map[6][7] = EntryInfo.createMetalWall();&#10;        map[6][8] = EntryInfo.createMetalWall();&#10;&#10;        // Add custom colored walls with specific light/dark combinations&#10;        EntryInfo greenWall = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('█')&#10;                .name(&quot;Green Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                .colorDark(AnsiColor.GREEN)&#10;                .height(1.0)&#10;                .build();&#10;&#10;        EntryInfo purpleWall = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▓')&#10;                .name(&quot;Purple Wall&quot;)&#10;                .colorLight(AnsiColor.MAGENTA)&#10;                .colorDark(AnsiColor.BRIGHT_MAGENTA)&#10;                .height(1.2)&#10;                .build();&#10;&#10;        map[6][4] = greenWall;&#10;        map[6][5] = greenWall;&#10;        map[5][9] = purpleWall;&#10;        map[6][9] = purpleWall;&#10;&#10;        // Add water area (blue floor)&#10;        EntryInfo water = EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character('~')&#10;                .name(&quot;Water&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_CYAN)&#10;                .colorDark(AnsiColor.CYAN)&#10;                .height(0.0)&#10;                .build();&#10;&#10;        map[3][9] = water;&#10;        map[3][10] = water;&#10;        map[4][9] = water;&#10;        map[4][10] = water;&#10;&#10;        return new DefaultMapProvider(&quot;Advanced Features&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a castle map with various EntryInfo types.&#10;     */&#10;    private static MapProvider createCastleMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[12][16];&#10;&#10;        // Initialize with floors&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.createFloor();&#10;            }&#10;        }&#10;&#10;        // Create outer walls with stone&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add castle features with enhanced colors&#10;        EntryInfo tower = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('♦')&#10;                .name(&quot;Tower&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_WHITE)&#10;                .colorDark(AnsiColor.WHITE)&#10;                .height(1.5)&#10;                .build();&#10;&#10;        EntryInfo gate = EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character('|')&#10;                .name(&quot;Gate&quot;)&#10;                .colorLight(AnsiColor.YELLOW)&#10;                .colorDark(AnsiColor.BRIGHT_YELLOW)&#10;                .height(0.8)&#10;                .build();&#10;&#10;        EntryInfo courtyard = EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▒')&#10;                .name(&quot;Courtyard Wall&quot;)&#10;                .colorLight(AnsiColor.CYAN)&#10;                .colorDark(AnsiColor.BLUE)&#10;                .height(0.7)&#10;                .build();&#10;&#10;        // Place towers&#10;        map[2][2] = tower;&#10;        map[2][13] = tower;&#10;        map[9][2] = tower;&#10;        map[9][13] = tower;&#10;&#10;        // Create gates&#10;        map[5][0] = gate;&#10;        map[6][0] = gate;&#10;&#10;        // Add interior walls with different materials&#10;        for (int x = 4; x &lt; 12; x++) {&#10;            if (x != 7 &amp;&amp; x != 8) { // Leave doorway&#10;                if (x &lt; 8) {&#10;                    map[5][x] = EntryInfo.createBrickWall();&#10;                } else {&#10;                    map[5][x] = EntryInfo.createMetalWall();&#10;                }&#10;            }&#10;        }&#10;&#10;        // Add courtyard walls&#10;        map[7][3] = courtyard;&#10;        map[8][3] = courtyard;&#10;        map[7][12] = courtyard;&#10;        map[8][12] = courtyard;&#10;&#10;        return new DefaultMapProvider(&quot;Castle&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a natural landscape map with water and grass.&#10;     */&#10;    private static MapProvider createNaturalLandscapeProvider() {&#10;        EntryInfo[][] map = new EntryInfo[10][14];&#10;&#10;        // Initialize with grass floor&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character(',')&#10;                        .name(&quot;Grass Floor&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                        .colorDark(AnsiColor.GREEN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Create water areas&#10;        for (int y = 2; y &lt;= 3; y++) {&#10;            for (int x = 4; x &lt;= 9; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character('~')&#10;                        .name(&quot;Water&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_CYAN)&#10;                        .colorDark(AnsiColor.CYAN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Create island with trees&#10;        for (int y = 1; y &lt;= 8; y++) {&#10;            for (int x = 1; x &lt;= 12; x++) {&#10;                if (x == 1 || x == 12 || y == 1 || y == 8) {&#10;                    map[y][x] = EntryInfo.createStoneWall();&#10;                } else if ((x + y) % 4 == 0) {&#10;                    map[y][x] = EntryInfo.createTree();&#10;                }&#10;            }&#10;        }&#10;&#10;        return new DefaultMapProvider(&quot;Natural Landscape&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a textured map provider showcasing various textures.&#10;     */&#10;    private static MapProvider createTexturedMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[10][10];&#10;&#10;        // Initialize with grass texture&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character(',')&#10;                        .name(&quot;Grass&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                        .colorDark(AnsiColor.GREEN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Add stone walls around the border&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add some wooden walls&#10;        for (int i = 2; i &lt; 8; i++) {&#10;            map[i][3] = EntryInfo.createWoodenWall();&#10;            map[i][6] = EntryInfo.createWoodenWall();&#10;        }&#10;&#10;        // Add a water area&#10;        for (int y = 4; y &lt;= 5; y++) {&#10;            for (int x = 1; x &lt;= 8; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character('~')&#10;                        .name(&quot;Water&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_CYAN)&#10;                        .colorDark(AnsiColor.CYAN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        return new DefaultMapProvider(&quot;Textured Map&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a tiling texture map provider showcasing various tiling textures.&#10;     */&#10;    private static MapProvider createTilingTextureMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[12][12];&#10;&#10;        // Initialize with grass texture&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                map[y][x] = EntryInfo.builder()&#10;                        .isWall(false)&#10;                        .isFallthrough(true)&#10;                        .isTransparent(true)&#10;                        .character(',')&#10;                        .name(&quot;Grass&quot;)&#10;                        .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                        .colorDark(AnsiColor.GREEN)&#10;                        .height(0.0)&#10;                        .build();&#10;            }&#10;        }&#10;&#10;        // Add stone walls around the border&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Create different sections to showcase tiling textures&#10;&#10;        // Left section: Tiling brick walls&#10;        for (int y = 2; y &lt;= 5; y++) {&#10;            map[y][3] = EntryInfo.createTilingBrickWall();&#10;        }&#10;&#10;        // Right section: Dotted walls&#10;        for (int y = 2; y &lt;= 5; y++) {&#10;            map[y][8] = EntryInfo.createDottedWall();&#10;        }&#10;&#10;        // Center section: Hash pattern walls&#10;        for (int x = 4; x &lt;= 7; x++) {&#10;            map[3][x] = EntryInfo.createHashWall();&#10;        }&#10;&#10;        // Bottom section: Wave pattern walls&#10;        for (int x = 4; x &lt;= 7; x++) {&#10;            map[8][x] = EntryInfo.createWaveWall();&#10;        }&#10;&#10;        // Add some traditional scaling textured walls for comparison&#10;        map[6][3] = EntryInfo.createWoodenWall(); // Uses scaling texture&#10;        map[6][8] = EntryInfo.createBrickWall();  // Uses scaling texture&#10;&#10;        return new DefaultMapProvider(&quot;Tiling Texture Demo&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Sets up the texture provider for the raycasting canvas.&#10;     */&#10;    private static void setupTextureProvider(RaycastingCanvas canvas) {&#10;        // Create a picture texture provider with various textures (scaling)&#10;        PictureTextureProvider pictureProvider = new PictureTextureProvider();&#10;&#10;        // Create a tiling texture provider with repeating patterns&#10;        TilingTextureProvider tilingProvider = new TilingTextureProvider();&#10;&#10;        // Add wood texture (scaling)&#10;        String[] woodTexture = {&#10;            &quot;|||###|||&quot;,&#10;            &quot;###|||###&quot;,&#10;            &quot;|||###|||&quot;,&#10;            &quot;###|||###&quot;,&#10;            &quot;|||###|||&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;wood&quot;, woodTexture);&#10;&#10;        // Add brick texture (scaling)&#10;        String[] brickTexture = {&#10;            &quot;##  ##  ##&quot;,&#10;            &quot;  ##  ##  &quot;,&#10;            &quot;##  ##  ##&quot;,&#10;            &quot;  ##  ##  &quot;,&#10;            &quot;##  ##  ##&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;brick&quot;, brickTexture);&#10;&#10;        // Add stone texture (scaling)&#10;        String[] stoneTexture = {&#10;            &quot;█▓▒░░▒▓█&quot;,&#10;            &quot;▓▒░  ░▒▓&quot;,&#10;            &quot;▒░    ░▒&quot;,&#10;            &quot;░      ░&quot;,&#10;            &quot;▒░    ░▒&quot;,&#10;            &quot;▓▒░  ░▒▓&quot;,&#10;            &quot;█▓▒░░▒▓█&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;stone&quot;, stoneTexture);&#10;&#10;        // Add metal texture (scaling)&#10;        String[] metalTexture = {&#10;            &quot;========&quot;,&#10;            &quot;||||||||&quot;,&#10;            &quot;--------&quot;,&#10;            &quot;||||||||&quot;,&#10;            &quot;========&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;metal&quot;, metalTexture);&#10;&#10;        // ===== FLOOR TEXTURES =====&#10;&#10;        // Add simple floor texture pattern&#10;        String[] floorTexture = {&#10;            &quot;░░▒▒░░&quot;,&#10;            &quot;░▒▓▓▒░&quot;,&#10;            &quot;▒▓██▓▒&quot;,&#10;            &quot;▒▓██▓▒&quot;,&#10;            &quot;░▒▓▓▒░&quot;,&#10;            &quot;░░▒▒░░&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;floor&quot;, floorTexture);&#10;&#10;        // Add stone floor texture&#10;        String[] stoneFloorTexture = {&#10;            &quot;▓▓░░▓▓&quot;,&#10;            &quot;▓░  ░▓&quot;,&#10;            &quot;░    ░&quot;,&#10;            &quot;░    ░&quot;,&#10;            &quot;▓░  ░▓&quot;,&#10;            &quot;▓▓░░▓▓&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;stone_floor&quot;, stoneFloorTexture);&#10;&#10;        // Add wooden floor texture&#10;        String[] woodFloorTexture = {&#10;            &quot;|||||||&quot;,&#10;            &quot;-------&quot;,&#10;            &quot;|||||||&quot;,&#10;            &quot;-------&quot;,&#10;            &quot;|||||||&quot;&#10;        };&#10;        pictureProvider.addTexture(&quot;wood_floor&quot;, woodFloorTexture);&#10;&#10;        // Add tiling patterns that look better when repeated&#10;        String[] tilingBrickPattern = {&#10;            &quot;██  ██&quot;,&#10;            &quot;  ██  &quot;,&#10;            &quot;██  ██&quot;&#10;        };&#10;        tilingProvider.addTilingTexture(&quot;tiling_brick&quot;, tilingBrickPattern);&#10;&#10;        String[] dotPattern = {&#10;            &quot; ● &quot;,&#10;            &quot;   &quot;,&#10;            &quot; ● &quot;&#10;        };&#10;        tilingProvider.addTilingTexture(&quot;dots&quot;, dotPattern);&#10;&#10;        String[] hashPattern = {&#10;            &quot;###&quot;,&#10;            &quot;# #&quot;,&#10;            &quot;###&quot;&#10;        };&#10;        tilingProvider.addTilingTexture(&quot;hash&quot;, hashPattern);&#10;&#10;        String[] wavePattern = {&#10;            &quot;~~~&quot;,&#10;            &quot;   &quot;,&#10;            &quot;~~~&quot;&#10;        };&#10;        tilingProvider.addTilingTexture(&quot;wave&quot;, wavePattern);&#10;&#10;        // Floor tiling patterns&#10;        String[] tilingFloorPattern = {&#10;            &quot;▓▓▓&quot;,&#10;            &quot;▓░▓&quot;,&#10;            &quot;▓▓▓&quot;&#10;        };&#10;        tilingProvider.addTilingTexture(&quot;tiling_floor&quot;, tilingFloorPattern);&#10;&#10;        String[] checkerFloorPattern = {&#10;            &quot;██&quot;,&#10;            &quot;  &quot;&#10;        };&#10;        tilingProvider.addTilingTexture(&quot;checker_floor&quot;, checkerFloorPattern);&#10;&#10;        String[] grassFloorPattern = {&#10;            &quot;,,'&quot;,&#10;            &quot;',,&quot;&#10;        };&#10;        tilingProvider.addTilingTexture(&quot;grass_floor&quot;, grassFloorPattern);&#10;&#10;        // Create a combined registry texture provider&#10;        RegistryTextureProvider registryProvider = new RegistryTextureProvider();&#10;&#10;        // Register picture textures (scaling)&#10;        registryProvider.registerTextureProvider(&quot;picture&quot;, pictureProvider);&#10;&#10;        // Register tiling textures (repeating)&#10;        registryProvider.registerTextureProvider(&quot;tiling&quot;, tilingProvider);&#10;&#10;        // Set the combined provider&#10;        canvas.setTextureProvider(registryProvider);&#10;    }&#10;&#10;    /**&#10;     * Creates a floor texture demonstration map.&#10;     */&#10;    private static MapProvider createFloorTextureMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[12][16];&#10;&#10;        // Initialize with different floor texture areas&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                if (x &lt; 4) {&#10;                    // Stone floor area&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('.')&#10;                            .name(&quot;Stone Floor&quot;)&#10;                            .colorLight(AnsiColor.WHITE)&#10;                            .colorDark(AnsiColor.BRIGHT_BLACK)&#10;                            .height(0.0)&#10;                            .texture(&quot;stone_floor&quot;)&#10;                            .build();&#10;                } else if (x &lt; 8) {&#10;                    // Wooden floor area&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('=')&#10;                            .name(&quot;Wood Floor&quot;)&#10;                            .colorLight(AnsiColor.YELLOW)&#10;                            .colorDark(AnsiColor.BRIGHT_YELLOW)&#10;                            .height(0.0)&#10;                            .texture(&quot;wood_floor&quot;)&#10;                            .build();&#10;                } else if (x &lt; 12) {&#10;                    // Tiled floor area&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('▓')&#10;                            .name(&quot;Tiled Floor&quot;)&#10;                            .colorLight(AnsiColor.CYAN)&#10;                            .colorDark(AnsiColor.BLUE)&#10;                            .height(0.0)&#10;                            .texture(&quot;tiling_floor&quot;)&#10;                            .build();&#10;                } else {&#10;                    // Grass floor area&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character(',')&#10;                            .name(&quot;Grass Floor&quot;)&#10;                            .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                            .colorDark(AnsiColor.GREEN)&#10;                            .height(0.0)&#10;                            .texture(&quot;grass_floor&quot;)&#10;                            .build();&#10;                }&#10;            }&#10;        }&#10;&#10;        // Add walls around the border&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add some interior walls to showcase floor textures better&#10;        for (int y = 3; y &lt;= 8; y++) {&#10;            map[y][4] = EntryInfo.createWoodenWall();&#10;            map[y][8] = EntryInfo.createBrickWall();&#10;            map[y][12] = EntryInfo.createMetalWall();&#10;        }&#10;&#10;        // Add doorways&#10;        map[5][4] = EntryInfo.createFloor();&#10;        map[6][4] = EntryInfo.createFloor();&#10;        map[5][8] = EntryInfo.createFloor();&#10;        map[6][8] = EntryInfo.createFloor();&#10;        map[5][12] = EntryInfo.createFloor();&#10;        map[6][12] = EntryInfo.createFloor();&#10;&#10;        return new DefaultMapProvider(&quot;Floor Textures Demo&quot;, map);&#10;    }&#10;&#10;    /**&#10;     * Creates a checkerboard floor pattern map.&#10;     */&#10;    private static MapProvider createCheckerboardFloorMapProvider() {&#10;        EntryInfo[][] map = new EntryInfo[10][10];&#10;&#10;        // Create checkerboard pattern&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            for (int x = 0; x &lt; map[y].length; x++) {&#10;                if ((x + y) % 2 == 0) {&#10;                    // White squares&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('█')&#10;                            .name(&quot;White Tile&quot;)&#10;                            .colorLight(AnsiColor.BRIGHT_WHITE)&#10;                            .colorDark(AnsiColor.WHITE)&#10;                            .height(0.0)&#10;                            .texture(&quot;checker_floor&quot;)&#10;                            .build();&#10;                } else {&#10;                    // Black squares&#10;                    map[y][x] = EntryInfo.builder()&#10;                            .isWall(false)&#10;                            .isFallthrough(true)&#10;                            .isTransparent(true)&#10;                            .character('▓')&#10;                            .name(&quot;Black Tile&quot;)&#10;                            .colorLight(AnsiColor.BRIGHT_BLACK)&#10;                            .colorDark(AnsiColor.BLACK)&#10;                            .height(0.0)&#10;                            .texture(&quot;checker_floor&quot;)&#10;                            .build();&#10;                }&#10;            }&#10;        }&#10;&#10;        // Add walls around the border&#10;        for (int x = 0; x &lt; map[0].length; x++) {&#10;            map[0][x] = EntryInfo.createStoneWall();&#10;            map[map.length - 1][x] = EntryInfo.createStoneWall();&#10;        }&#10;        for (int y = 0; y &lt; map.length; y++) {&#10;            map[y][0] = EntryInfo.createStoneWall();&#10;            map[y][map[0].length - 1] = EntryInfo.createStoneWall();&#10;        }&#10;&#10;        // Add a few interior walls&#10;        map[3][3] = EntryInfo.createBrickWall();&#10;        map[3][4] = EntryInfo.createBrickWall();&#10;        map[3][5] = EntryInfo.createBrickWall();&#10;        map[6][3] = EntryInfo.createWoodenWall();&#10;        map[6][4] = EntryInfo.createWoodenWall();&#10;        map[6][5] = EntryInfo.createWoodenWall();&#10;&#10;        return new DefaultMapProvider(&quot;Checkerboard Floor&quot;, map);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        try {&#10;            // Create the main screen canvas&#10;            ScreenCanvas screen = new ScreenCanvas(80, 25);&#10;&#10;            // Create main container with BorderLayout&#10;            Composite mainContainer = new Composite(&quot;mainContainer&quot;,&#10;                    screen.getWidth() - 4,&#10;                    screen.getHeight() - 4,&#10;                    new BorderLayout(1));&#10;&#10;            // Create header&#10;            Box headerBox = new Box(&quot;headerBox&quot;, 0, 5, new DefaultBorder());&#10;            Text headerText = new Text(&quot;headerText&quot;, 0, 0,&#10;                &quot;Raycasting Demo - First Person 3D World (MapProvider)\n&quot; +&#10;                &quot;WASD: Move | Arrows: Rotate/Fine Move | M: Change Map | R: Reset\n&quot; +&#10;                &quot;E: Toggle Wall Edges | T: Edge Threshold | C: Edge Style | Q/ESC: Exit&quot;,&#10;                Text.Alignment.CENTER);&#10;            headerText.setForegroundColor(AnsiColor.BRIGHT_CYAN);&#10;            headerText.setBold(true);&#10;            headerBox.setContent(headerText);&#10;            headerBox.setLayoutConstraint(new PositionConstraint(PositionConstraint.Position.TOP_CENTER));&#10;&#10;            // Create raycasting canvas with MapProvider&#10;            raycastingCanvas = new RaycastingCanvas(&quot;Raycasting World&quot;, 0, 0, MAP_PROVIDERS[currentMapIndex]);&#10;            raycastingCanvas.setPlayerPosition(2.5, 2.5);&#10;            raycastingCanvas.setWallColor(AnsiColor.WHITE);&#10;            raycastingCanvas.setFloorColor(AnsiColor.YELLOW);&#10;            raycastingCanvas.setCeilingColor(AnsiColor.BLUE);&#10;            raycastingCanvas.setLayoutConstraint(new PositionConstraint(PositionConstraint.Position.CENTER));&#10;&#10;            // Setup texture provider&#10;            setupTextureProvider(raycastingCanvas);&#10;&#10;            // Create status panel&#10;            Text statusText = new Text(&quot;statusText&quot;, 0, 0, &quot;&quot;, Text.Alignment.LEFT);&#10;            statusText.setForegroundColor(AnsiColor.WHITE);&#10;            Box statusBox = new Box(&quot;statusBox&quot;, 0, 3, new DefaultBorder());&#10;            statusBox.setContent(statusText);&#10;            statusBox.setLayoutConstraint(new PositionConstraint(PositionConstraint.Position.BOTTOM_CENTER));&#10;&#10;            // Add all components to main container&#10;            mainContainer.addChild(headerBox);&#10;            mainContainer.addChild(raycastingCanvas);&#10;            mainContainer.addChild(statusBox);&#10;&#10;            // Position the main container&#10;            screen.setContent(mainContainer);&#10;&#10;            // Register keyboard shortcuts&#10;            registerKeyboardControls(screen);&#10;&#10;            // Create and start the process loop&#10;            ProcessLoop processLoop = new ProcessLoop(screen);&#10;            processLoop.setUpdateCallback(() -&gt; {&#10;                // Update status text with MapProvider information&#10;                statusText.setText(String.format(&#10;                    &quot;Position: (%.1f, %.1f) | Angle: %.0f° | %s | Map: %s (%d/%d)&quot;,&#10;                    raycastingCanvas.getPlayerX(),&#10;                    raycastingCanvas.getPlayerY(),&#10;                    Math.toDegrees(raycastingCanvas.getPlayerAngle()),&#10;                    lastAction,&#10;                    raycastingCanvas.getMapProvider().getName(),&#10;                    currentMapIndex + 1,&#10;                    MAP_PROVIDERS.length&#10;                ));&#10;            });&#10;&#10;            log.info(&quot;Starting Raycasting Demo with MapProvider...&quot;);&#10;            processLoop.start();&#10;&#10;        } catch (IOException e) {&#10;            log.error(&quot;Error initializing Raycasting Demo&quot;, e);&#10;        }&#10;    }&#10;&#10;    private static void registerKeyboardControls(ScreenCanvas screen) {&#10;        double moveSpeed = 0.1;&#10;        double rotateSpeed = 0.1;&#10;&#10;        // Movement controls&#10;        screen.registerShortcut(&quot;W&quot;, () -&gt; {&#10;            raycastingCanvas.movePlayer(moveSpeed);&#10;            lastAction = &quot;Move Forward&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;S&quot;, () -&gt; {&#10;            raycastingCanvas.movePlayer(-moveSpeed);&#10;            lastAction = &quot;Move Backward&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;A&quot;, () -&gt; {&#10;            raycastingCanvas.strafePlayer(-moveSpeed);&#10;            lastAction = &quot;Strafe Left&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;D&quot;, () -&gt; {&#10;            raycastingCanvas.strafePlayer(moveSpeed);&#10;            lastAction = &quot;Strafe Right&quot;;&#10;        });&#10;&#10;        // Rotation controls&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_LEFT.name(), () -&gt; {&#10;            raycastingCanvas.rotatePlayer(-rotateSpeed);&#10;            lastAction = &quot;Rotate Left&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_RIGHT.name(), () -&gt; {&#10;            raycastingCanvas.rotatePlayer(rotateSpeed);&#10;            lastAction = &quot;Rotate Right&quot;;&#10;        });&#10;&#10;        // Wall edge controls&#10;        screen.registerShortcut(&quot;E&quot;, () -&gt; {&#10;            raycastingCanvas.setDrawWallEdges(!raycastingCanvas.isDrawWallEdges());&#10;            lastAction = &quot;Wall Edges toggled&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;T&quot;, () -&gt; {&#10;            raycastingCanvas.setWallEdgeThreshold(&#10;                raycastingCanvas.getWallEdgeThreshold() + 0.1 &gt; 1.0 ? 0.0 : raycastingCanvas.getWallEdgeThreshold() + 0.1&#10;            );&#10;            lastAction = &quot;Edge Threshold changed&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(&quot;C&quot;, () -&gt; {&#10;            currentWallEdgeStyleIndex = (currentWallEdgeStyleIndex + 1) % wallEdgeStyles.length;&#10;            raycastingCanvas.setWallEdgeChar(wallEdgeStyles[currentWallEdgeStyleIndex]);&#10;            lastAction = &quot;Edge Character changed&quot;;&#10;        });&#10;&#10;        // Map change - now uses MapProvider&#10;        screen.registerShortcut(&quot;M&quot;, () -&gt; {&#10;            currentMapIndex = (currentMapIndex + 1) % MAP_PROVIDERS.length;&#10;            raycastingCanvas.setMapProvider(MAP_PROVIDERS[currentMapIndex]);&#10;            raycastingCanvas.setPlayerPosition(2.5, 2.5);&#10;            lastAction = &quot;Changed to &quot; + MAP_PROVIDERS[currentMapIndex].getName();&#10;        });&#10;&#10;        // Reset player&#10;        screen.registerShortcut(&quot;R&quot;, () -&gt; {&#10;            raycastingCanvas.setPlayerPosition(2.5, 2.5);&#10;            raycastingCanvas.setPlayerAngle(0.0);&#10;            lastAction = &quot;Player Reset&quot;;&#10;        });&#10;&#10;        // Fine movement controls&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_UP.name(), () -&gt; {&#10;            raycastingCanvas.movePlayer(moveSpeed * 0.5);&#10;            lastAction = &quot;Move Forward (Slow)&quot;;&#10;        });&#10;&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ARROW_DOWN.name(), () -&gt; {&#10;            raycastingCanvas.movePlayer(-moveSpeed * 0.5);&#10;            lastAction = &quot;Move Backward (Slow)&quot;;&#10;        });&#10;&#10;        // Exit&#10;        screen.registerShortcut(&quot;Q&quot;, () -&gt; {&#10;            log.info(&quot;Exiting Raycasting Demo...&quot;);&#10;            System.exit(0);&#10;        });&#10;&#10;        screen.registerShortcut(KeyEvent.SpecialKey.ESCAPE.name(), () -&gt; {&#10;            log.info(&quot;Exiting Raycasting Demo...&quot;);&#10;            System.exit(0);&#10;        });&#10;    }&#10;&#10;    private static Box createControlButton(String text, AnsiColor color, Runnable action) {&#10;        Text buttonText = new Text(&quot;buttonText&quot;, 0, 0, text, Text.Alignment.CENTER);&#10;        buttonText.setForegroundColor(color);&#10;        buttonText.setBold(true);&#10;&#10;        Box button = new Box(&quot;button&quot;, 12, 3, new DefaultBorder());&#10;        button.setContent(buttonText);&#10;&#10;        return button;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/EntryInfo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/EntryInfo.java" />
              <option name="originalContent" value="package com.consolemaster.raycasting;&#10;&#10;import com.consolemaster.AnsiColor;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.Builder;&#10;import lombok.AllArgsConstructor;&#10;import lombok.NoArgsConstructor;&#10;&#10;/**&#10; * Information about a map entry including visual representation,&#10; * collision properties, and rendering characteristics.&#10; */&#10;@Getter&#10;@Setter&#10;@Builder&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class EntryInfo {&#10;&#10;    /**&#10;     * True if this entry represents a wall that blocks vision and movement.&#10;     */&#10;    @Builder.Default&#10;    private boolean isWall = false;&#10;&#10;    /**&#10;     * True if the player can walk through this entry (opposite of collision).&#10;     */&#10;    @Builder.Default&#10;    private boolean isFallthrough = true;&#10;&#10;    /**&#10;     * True if this entry is transparent and allows vision through it.&#10;     */&#10;    @Builder.Default&#10;    private boolean isTransparent = true;&#10;&#10;    /**&#10;     * The character used to render this entry.&#10;     * Default: '█' for walls, '.' for floors.&#10;     */&#10;    @Builder.Default&#10;    private char character = ' ';&#10;&#10;    /**&#10;     * Name of this entry type for debugging and display purposes.&#10;     */&#10;    @Builder.Default&#10;    private String name = &quot;Empty&quot;;&#10;&#10;    /**&#10;     * Light color for rendering this entry (used for vertical walls or well-lit surfaces).&#10;     * Null means use default color.&#10;     */&#10;    private AnsiColor colorLight;&#10;&#10;    /**&#10;     * Dark color for rendering this entry (used for horizontal walls or shadowed surfaces).&#10;     * Null means use default color or derive from colorLight.&#10;     */&#10;    private AnsiColor colorDark;&#10;&#10;    /**&#10;     * Height of the wall (used for rendering). Default is 1.0 (full height).&#10;     */&#10;    @Builder.Default&#10;    private double height = 1.0;&#10;&#10;    /**&#10;     * Path to texture file. Null means no texture.&#10;     */&#10;    private String texture;&#10;&#10;    /**&#10;     * Instructions for texture rendering. Null means default behavior.&#10;     */&#10;    private String textureInstructions;&#10;&#10;    /**&#10;     * Get the appropriate color based on lighting conditions.&#10;     *&#10;     * @param isDark true if dark color should be used (e.g., horizontal walls)&#10;     * @return the appropriate color or null if no color is set&#10;     */&#10;    public AnsiColor getColor(boolean isDark) {&#10;        if (isDark &amp;&amp; colorDark != null) {&#10;            return colorDark;&#10;        } else if (!isDark &amp;&amp; colorLight != null) {&#10;            return colorLight;&#10;        } else if (colorLight != null) {&#10;            // Fall back to light color if dark is not available&#10;            return colorLight;&#10;        } else if (colorDark != null) {&#10;            // Fall back to dark color if light is not available&#10;            return colorDark;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Get the light color (for backward compatibility).&#10;     *&#10;     * @return the light color&#10;     */&#10;    public AnsiColor getColor() {&#10;        return getColor(false);&#10;    }&#10;&#10;    /**&#10;     * Set both light and dark colors to the same value (for backward compatibility).&#10;     *&#10;     * @param color the color to set for both light and dark&#10;     */&#10;    public void setColor(AnsiColor color) {&#10;        this.colorLight = color;&#10;        this.colorDark = color;&#10;    }&#10;&#10;    // Predefined common entry types&#10;&#10;    /**&#10;     * Creates a standard wall entry with light and dark colors.&#10;     */&#10;    public static EntryInfo createWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('█')&#10;                .name(&quot;Wall&quot;)&#10;                .colorLight(AnsiColor.WHITE)&#10;                .colorDark(AnsiColor.BRIGHT_BLACK)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a standard floor entry.&#10;     */&#10;    public static EntryInfo createFloor() {&#10;        return EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character('.')&#10;                .name(&quot;Floor&quot;)&#10;                .colorLight(AnsiColor.YELLOW)&#10;                .colorDark(AnsiColor.YELLOW)&#10;                .height(0.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates an empty space entry.&#10;     */&#10;    public static EntryInfo createEmpty() {&#10;        return EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character(' ')&#10;                .name(&quot;Empty&quot;)&#10;                .colorLight(null)&#10;                .colorDark(null)&#10;                .height(0.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a glass wall (transparent but blocking movement).&#10;     */&#10;    public static EntryInfo createGlass() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(true)&#10;                .character('|')&#10;                .name(&quot;Glass&quot;)&#10;                .colorLight(AnsiColor.CYAN)&#10;                .colorDark(AnsiColor.BLUE)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a half-height wall with appropriate colors.&#10;     */&#10;    public static EntryInfo createLowWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▄')&#10;                .name(&quot;Low Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_BLACK)&#10;                .colorDark(AnsiColor.BLACK)&#10;                .height(0.5)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a stone wall with realistic stone colors.&#10;     */&#10;    public static EntryInfo createStoneWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('█')&#10;                .name(&quot;Stone Wall&quot;)&#10;                .colorLight(AnsiColor.WHITE)&#10;                .colorDark(AnsiColor.BRIGHT_BLACK)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a brick wall with warm brick colors.&#10;     */&#10;    public static EntryInfo createBrickWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▓')&#10;                .name(&quot;Brick Wall&quot;)&#10;                .colorLight(AnsiColor.RED)&#10;                .colorDark(AnsiColor.BRIGHT_RED)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a metal wall with metallic colors.&#10;     */&#10;    public static EntryInfo createMetalWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▒')&#10;                .name(&quot;Metal Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_WHITE)&#10;                .colorDark(AnsiColor.WHITE)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a tree wall with natural colors.&#10;     */&#10;    public static EntryInfo createTree() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('♠')&#10;                .name(&quot;Tree&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                .colorDark(AnsiColor.GREEN)&#10;                .height(1.3)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a wooden wall with natural wood colors.&#10;     */&#10;    public static EntryInfo createWoodenWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▓')&#10;                .name(&quot;Wooden Wall&quot;)&#10;                .colorLight(AnsiColor.YELLOW)&#10;                .colorDark(AnsiColor.BRIGHT_YELLOW)&#10;                .height(1.0)&#10;                .texture(&quot;wood&quot;)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates an entry from a legacy character representation.&#10;     *&#10;     * @param character the legacy character&#10;     * @return appropriate EntryInfo&#10;     */&#10;    public static EntryInfo fromCharacter(char character) {&#10;        return switch (character) {&#10;            case '#' -&gt; createWall();&#10;            case '.' -&gt; createFloor();&#10;            case ' ' -&gt; createEmpty();&#10;            default -&gt; EntryInfo.builder()&#10;                    .isWall(false)&#10;                    .isFallthrough(true)&#10;                    .isTransparent(true)&#10;                    .character(character)&#10;                    .name(&quot;Custom&quot;)&#10;                    .build();&#10;        };&#10;    }&#10;&#10;    /**&#10;     * Converts this EntryInfo to a legacy character representation.&#10;     *&#10;     * @return character representation&#10;     */&#10;    public char toCharacter() {&#10;        if (isWall &amp;&amp; !isTransparent) {&#10;            return '#';&#10;        } else if (!isWall &amp;&amp; character == '.') {&#10;            return '.';&#10;        } else if (!isWall &amp;&amp; character == ' ') {&#10;            return ' ';&#10;        } else {&#10;            return character;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.format(&quot;EntryInfo{name='%s', char='%c', wall=%s, fallthrough=%s, transparent=%s, height=%.1f, colors=[%s,%s]}&quot;,&#10;                name, character, isWall, isFallthrough, isTransparent, height, colorLight, colorDark);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.consolemaster.raycasting;&#10;&#10;import com.consolemaster.AnsiColor;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.Builder;&#10;import lombok.AllArgsConstructor;&#10;import lombok.NoArgsConstructor;&#10;&#10;/**&#10; * Information about a map entry including visual representation,&#10; * collision properties, and rendering characteristics.&#10; */&#10;@Getter&#10;@Setter&#10;@Builder&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class EntryInfo {&#10;&#10;    /**&#10;     * True if this entry represents a wall that blocks vision and movement.&#10;     */&#10;    @Builder.Default&#10;    private boolean isWall = false;&#10;&#10;    /**&#10;     * True if the player can walk through this entry (opposite of collision).&#10;     */&#10;    @Builder.Default&#10;    private boolean isFallthrough = true;&#10;&#10;    /**&#10;     * True if this entry is transparent and allows vision through it.&#10;     */&#10;    @Builder.Default&#10;    private boolean isTransparent = true;&#10;&#10;    /**&#10;     * The character used to render this entry.&#10;     * Default: '█' for walls, '.' for floors.&#10;     */&#10;    @Builder.Default&#10;    private char character = ' ';&#10;&#10;    /**&#10;     * Name of this entry type for debugging and display purposes.&#10;     */&#10;    @Builder.Default&#10;    private String name = &quot;Empty&quot;;&#10;&#10;    /**&#10;     * Light color for rendering this entry (used for vertical walls or well-lit surfaces).&#10;     * Null means use default color.&#10;     */&#10;    private AnsiColor colorLight;&#10;&#10;    /**&#10;     * Dark color for rendering this entry (used for horizontal walls or shadowed surfaces).&#10;     * Null means use default color or derive from colorLight.&#10;     */&#10;    private AnsiColor colorDark;&#10;&#10;    /**&#10;     * Height of the wall (used for rendering). Default is 1.0 (full height).&#10;     */&#10;    @Builder.Default&#10;    private double height = 1.0;&#10;&#10;    /**&#10;     * Path to texture file. Null means no texture.&#10;     */&#10;    private String texture;&#10;&#10;    /**&#10;     * Instructions for texture rendering. Null means default behavior.&#10;     */&#10;    private String textureInstructions;&#10;&#10;    /**&#10;     * Get the appropriate color based on lighting conditions.&#10;     *&#10;     * @param isDark true if dark color should be used (e.g., horizontal walls)&#10;     * @return the appropriate color or null if no color is set&#10;     */&#10;    public AnsiColor getColor(boolean isDark) {&#10;        if (isDark &amp;&amp; colorDark != null) {&#10;            return colorDark;&#10;        } else if (!isDark &amp;&amp; colorLight != null) {&#10;            return colorLight;&#10;        } else if (colorLight != null) {&#10;            // Fall back to light color if dark is not available&#10;            return colorLight;&#10;        } else if (colorDark != null) {&#10;            // Fall back to dark color if light is not available&#10;            return colorDark;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Get the light color (for backward compatibility).&#10;     *&#10;     * @return the light color&#10;     */&#10;    public AnsiColor getColor() {&#10;        return getColor(false);&#10;    }&#10;&#10;    /**&#10;     * Set both light and dark colors to the same value (for backward compatibility).&#10;     *&#10;     * @param color the color to set for both light and dark&#10;     */&#10;    public void setColor(AnsiColor color) {&#10;        this.colorLight = color;&#10;        this.colorDark = color;&#10;    }&#10;&#10;    // Predefined common entry types&#10;&#10;    /**&#10;     * Creates a standard wall entry with light and dark colors.&#10;     */&#10;    public static EntryInfo createWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('█')&#10;                .name(&quot;Wall&quot;)&#10;                .colorLight(AnsiColor.WHITE)&#10;                .colorDark(AnsiColor.BRIGHT_BLACK)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a standard floor entry.&#10;     */&#10;    public static EntryInfo createFloor() {&#10;        return EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character('.')&#10;                .name(&quot;Floor&quot;)&#10;                .colorLight(AnsiColor.YELLOW)&#10;                .colorDark(AnsiColor.YELLOW)&#10;                .height(0.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates an empty space entry.&#10;     */&#10;    public static EntryInfo createEmpty() {&#10;        return EntryInfo.builder()&#10;                .isWall(false)&#10;                .isFallthrough(true)&#10;                .isTransparent(true)&#10;                .character(' ')&#10;                .name(&quot;Empty&quot;)&#10;                .colorLight(null)&#10;                .colorDark(null)&#10;                .height(0.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a glass wall (transparent but blocking movement).&#10;     */&#10;    public static EntryInfo createGlass() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(true)&#10;                .character('|')&#10;                .name(&quot;Glass&quot;)&#10;                .colorLight(AnsiColor.CYAN)&#10;                .colorDark(AnsiColor.BLUE)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a half-height wall with appropriate colors.&#10;     */&#10;    public static EntryInfo createLowWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▄')&#10;                .name(&quot;Low Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_BLACK)&#10;                .colorDark(AnsiColor.BLACK)&#10;                .height(0.5)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a stone wall with realistic stone colors.&#10;     */&#10;    public static EntryInfo createStoneWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('█')&#10;                .name(&quot;Stone Wall&quot;)&#10;                .colorLight(AnsiColor.WHITE)&#10;                .colorDark(AnsiColor.BRIGHT_BLACK)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a brick wall with warm brick colors.&#10;     */&#10;    public static EntryInfo createBrickWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▓')&#10;                .name(&quot;Brick Wall&quot;)&#10;                .colorLight(AnsiColor.RED)&#10;                .colorDark(AnsiColor.BRIGHT_RED)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a metal wall with metallic colors.&#10;     */&#10;    public static EntryInfo createMetalWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▒')&#10;                .name(&quot;Metal Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_WHITE)&#10;                .colorDark(AnsiColor.WHITE)&#10;                .height(1.0)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a tree wall with natural colors.&#10;     */&#10;    public static EntryInfo createTree() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('♠')&#10;                .name(&quot;Tree&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_GREEN)&#10;                .colorDark(AnsiColor.GREEN)&#10;                .height(1.3)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a wooden wall with natural wood colors.&#10;     */&#10;    public static EntryInfo createWoodenWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('▓')&#10;                .name(&quot;Wooden Wall&quot;)&#10;                .colorLight(AnsiColor.YELLOW)&#10;                .colorDark(AnsiColor.BRIGHT_YELLOW)&#10;                .height(1.0)&#10;                .texture(&quot;wood&quot;)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a tiling wall with dots pattern.&#10;     */&#10;    public static EntryInfo createDottedWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('•')&#10;                .name(&quot;Dotted Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_WHITE)&#10;                .colorDark(AnsiColor.WHITE)&#10;                .height(1.0)&#10;                .texture(&quot;tiling_dots&quot;)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a tiling wall with hash pattern.&#10;     */&#10;    public static EntryInfo createHashWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('#')&#10;                .name(&quot;Hash Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_YELLOW)&#10;                .colorDark(AnsiColor.YELLOW)&#10;                .height(1.0)&#10;                .texture(&quot;tiling_hash&quot;)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a tiling wall with wave pattern.&#10;     */&#10;    public static EntryInfo createWaveWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('~')&#10;                .name(&quot;Wave Wall&quot;)&#10;                .colorLight(AnsiColor.BRIGHT_CYAN)&#10;                .colorDark(AnsiColor.CYAN)&#10;                .height(1.0)&#10;                .texture(&quot;tiling_waves&quot;)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates a tiling brick wall that repeats instead of scaling.&#10;     */&#10;    public static EntryInfo createTilingBrickWall() {&#10;        return EntryInfo.builder()&#10;                .isWall(true)&#10;                .isFallthrough(false)&#10;                .isTransparent(false)&#10;                .character('█')&#10;                .name(&quot;Tiling Brick Wall&quot;)&#10;                .colorLight(AnsiColor.RED)&#10;                .colorDark(AnsiColor.BRIGHT_RED)&#10;                .height(1.0)&#10;                .texture(&quot;tiling_brick&quot;)&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Creates an entry from a legacy character representation.&#10;     *&#10;     * @param character the legacy character&#10;     * @return appropriate EntryInfo&#10;     */&#10;    public static EntryInfo fromCharacter(char character) {&#10;        return switch (character) {&#10;            case '#' -&gt; createWall();&#10;            case '.' -&gt; createFloor();&#10;            case ' ' -&gt; createEmpty();&#10;            default -&gt; EntryInfo.builder()&#10;                    .isWall(false)&#10;                    .isFallthrough(true)&#10;                    .isTransparent(true)&#10;                    .character(character)&#10;                    .name(&quot;Custom&quot;)&#10;                    .build();&#10;        };&#10;    }&#10;&#10;    /**&#10;     * Converts this EntryInfo to a legacy character representation.&#10;     *&#10;     * @return character representation&#10;     */&#10;    public char toCharacter() {&#10;        if (isWall &amp;&amp; !isTransparent) {&#10;            return '#';&#10;        } else if (!isWall &amp;&amp; character == '.') {&#10;            return '.';&#10;        } else if (!isWall &amp;&amp; character == ' ') {&#10;            return ' ';&#10;        } else {&#10;            return character;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.format(&quot;EntryInfo{name='%s', char='%c', wall=%s, fallthrough=%s, transparent=%s, height=%.1f, colors=[%s,%s]}&quot;,&#10;                name, character, isWall, isFallthrough, isTransparent, height, colorLight, colorDark);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/TilingTexture.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/TilingTexture.java" />
              <option name="updatedContent" value="package com.consolemaster.raycasting;&#10;&#10;import com.consolemaster.AnsiColor;&#10;import com.consolemaster.StyledChar;&#10;&#10;/**&#10; * A texture implementation that uses string arrays as source data with tiling (repeating) behavior.&#10; * Instead of scaling the texture to fit the target dimensions, this texture tiles/repeats the pattern.&#10; */&#10;public class TilingTexture implements Texture {&#10;&#10;    private final String[] textureData;&#10;    private final String name;&#10;    private final int width;&#10;    private final int height;&#10;    private final EntryInfo entry;&#10;    private final boolean light;&#10;&#10;    /**&#10;     * Creates a new tiling texture from string array data with specified dimensions and rendering parameters.&#10;     * &#10;     * @param name the name of this texture&#10;     * @param textureData array of strings representing the texture pattern&#10;     * @param width the target width for rendering&#10;     * @param height the target height for rendering&#10;     * @param entry the entry info for color and lighting information&#10;     * @param light true for light rendering, false for dark rendering&#10;     */&#10;    public TilingTexture(String name, String[] textureData, int width, int height, EntryInfo entry, boolean light) {&#10;        this.name = name;&#10;        this.textureData = textureData != null ? textureData.clone() : new String[]{&quot;#&quot;};&#10;        this.width = width;&#10;        this.height = height;&#10;        this.entry = entry;&#10;        this.light = light;&#10;    }&#10;&#10;    @Override&#10;    public StyledChar getCharAt(int x, int y) {&#10;        // Check bounds&#10;        if (x &lt; 0 || x &gt;= width || y &lt; 0 || y &gt;= height) {&#10;            return null;&#10;        }&#10;&#10;        // Get source dimensions&#10;        int sourceHeight = textureData.length;&#10;        int sourceWidth = sourceHeight &gt; 0 ? textureData[0].length() : 1;&#10;&#10;        // Handle empty texture data&#10;        if (sourceHeight == 0 || sourceWidth == 0) {&#10;            char defaultChar = entry != null ? entry.getCharacter() : '#';&#10;            AnsiColor defaultColor = entry != null ? entry.getColor(!light) : AnsiColor.WHITE;&#10;            return new StyledChar(defaultChar, defaultColor);&#10;        }&#10;&#10;        // Use modulo to tile/repeat the texture pattern&#10;        int sourceY = y % sourceHeight;&#10;        int sourceX = x % sourceWidth;&#10;&#10;        // Ensure we don't go out of bounds after modulo operation&#10;        sourceY = Math.max(0, Math.min(sourceY, sourceHeight - 1));&#10;        sourceX = Math.max(0, Math.min(sourceX, Math.min(sourceWidth - 1, textureData[sourceY].length() - 1)));&#10;&#10;        // Get character from source&#10;        char textureChar;&#10;        if (sourceY &gt;= 0 &amp;&amp; sourceY &lt; textureData.length &amp;&amp;&#10;            sourceX &gt;= 0 &amp;&amp; sourceX &lt; textureData[sourceY].length()) {&#10;            textureChar = textureData[sourceY].charAt(sourceX);&#10;        } else {&#10;            textureChar = entry != null ? entry.getCharacter() : '#';&#10;        }&#10;&#10;        // Get color from entry&#10;        AnsiColor textureColor = entry != null ? entry.getColor(!light) : AnsiColor.WHITE;&#10;        if (textureColor == null) {&#10;            textureColor = AnsiColor.WHITE;&#10;        }&#10;&#10;        return new StyledChar(textureChar, textureColor);&#10;    }&#10;&#10;    /**&#10;     * Gets the name of this texture.&#10;     */&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    /**&#10;     * Gets the source texture data.&#10;     */&#10;    public String[] getTextureData() {&#10;        return textureData.clone();&#10;    }&#10;&#10;    /**&#10;     * Gets the configured width.&#10;     */&#10;    public int getWidth() {&#10;        return width;&#10;    }&#10;&#10;    /**&#10;     * Gets the configured height.&#10;     */&#10;    public int getHeight() {&#10;        return height;&#10;    }&#10;&#10;    /**&#10;     * Gets the source texture width (original pattern width).&#10;     */&#10;    public int getSourceWidth() {&#10;        return textureData.length &gt; 0 ? textureData[0].length() : 1;&#10;    }&#10;&#10;    /**&#10;     * Gets the source texture height (original pattern height).&#10;     */&#10;    public int getSourceHeight() {&#10;        return textureData.length;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/TilingTextureProvider.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/TilingTextureProvider.java" />
              <option name="updatedContent" value="package com.consolemaster.raycasting;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * A texture provider that manages tiling textures from string arrays.&#10; * Instead of scaling textures to fit dimensions, this provider tiles/repeats patterns.&#10; * Acts as a transformator that creates tiling textures with specified dimensions and parameters.&#10; */&#10;public class TilingTextureProvider implements TextureProvider {&#10;&#10;    private final Map&lt;String, String[]&gt; textureDataMap = new HashMap&lt;&gt;();&#10;&#10;    /**&#10;     * Adds a texture to this provider.&#10;     * &#10;     * @param path the path/name for the texture&#10;     * @param textureData the string array representing the texture pattern&#10;     */&#10;    public void addTexture(String path, String[] textureData) {&#10;        if (path != null &amp;&amp; textureData != null) {&#10;            textureDataMap.put(path, textureData.clone());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Texture getTexture(String path, int width, int height, EntryInfo entry, boolean light) {&#10;        String[] textureData = textureDataMap.get(path);&#10;        if (textureData == null) {&#10;            return null;&#10;        }&#10;        &#10;        return new TilingTexture(path, textureData, width, height, entry, light);&#10;    }&#10;&#10;    /**&#10;     * Removes a texture from this provider.&#10;     * &#10;     * @param path the path of the texture to remove&#10;     * @return true if the texture was removed, false if not found&#10;     */&#10;    public boolean removeTexture(String path) {&#10;        return textureDataMap.remove(path) != null;&#10;    }&#10;&#10;    /**&#10;     * Checks if this provider has a texture with the given path.&#10;     * &#10;     * @param path the path to check&#10;     * @return true if the texture exists&#10;     */&#10;    public boolean hasTexture(String path) {&#10;        return textureDataMap.containsKey(path);&#10;    }&#10;&#10;    /**&#10;     * Gets all texture paths managed by this provider.&#10;     * &#10;     * @return array of texture paths&#10;     */&#10;    public String[] getTexturePaths() {&#10;        return textureDataMap.keySet().toArray(new String[0]);&#10;    }&#10;&#10;    /**&#10;     * Clears all textures from this provider.&#10;     */&#10;    public void clear() {&#10;        textureDataMap.clear();&#10;    }&#10;&#10;    /**&#10;     * Gets the source dimensions of a texture pattern.&#10;     * &#10;     * @param path the texture path&#10;     * @return array with [width, height] or null if texture not found&#10;     */&#10;    public int[] getSourceDimensions(String path) {&#10;        String[] textureData = textureDataMap.get(path);&#10;        if (textureData == null || textureData.length == 0) {&#10;            return null;&#10;        }&#10;        &#10;        int height = textureData.length;&#10;        int width = textureData[0].length();&#10;        return new int[]{width, height};&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>