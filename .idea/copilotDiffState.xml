<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/TilingTextureProvider.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/raycasting/src/main/java/com/consolemaster/raycasting/TilingTextureProvider.java" />
              <option name="updatedContent" value="package com.consolemaster.raycasting;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * A texture provider that manages tiling textures from string arrays.&#10; * Instead of scaling textures to fit dimensions, this provider tiles/repeats patterns.&#10; * Acts as a transformator that creates tiling textures with specified dimensions and parameters.&#10; */&#10;public class TilingTextureProvider implements TextureProvider {&#10;&#10;    private final Map&lt;String, String[]&gt; textureDataMap = new HashMap&lt;&gt;();&#10;&#10;    /**&#10;     * Adds a texture to this provider.&#10;     * &#10;     * @param path the path/name for the texture&#10;     * @param textureData the string array representing the texture pattern&#10;     */&#10;    public void addTexture(String path, String[] textureData) {&#10;        if (path != null &amp;&amp; textureData != null) {&#10;            textureDataMap.put(path, textureData.clone());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Texture getTexture(String path, int width, int height, EntryInfo entry, boolean light) {&#10;        String[] textureData = textureDataMap.get(path);&#10;        if (textureData == null) {&#10;            return null;&#10;        }&#10;        &#10;        return new TilingTexture(path, textureData, width, height, entry, light);&#10;    }&#10;&#10;    /**&#10;     * Removes a texture from this provider.&#10;     * &#10;     * @param path the path of the texture to remove&#10;     * @return true if the texture was removed, false if not found&#10;     */&#10;    public boolean removeTexture(String path) {&#10;        return textureDataMap.remove(path) != null;&#10;    }&#10;&#10;    /**&#10;     * Checks if this provider has a texture with the given path.&#10;     * &#10;     * @param path the path to check&#10;     * @return true if the texture exists&#10;     */&#10;    public boolean hasTexture(String path) {&#10;        return textureDataMap.containsKey(path);&#10;    }&#10;&#10;    /**&#10;     * Gets all texture paths managed by this provider.&#10;     * &#10;     * @return array of texture paths&#10;     */&#10;    public String[] getTexturePaths() {&#10;        return textureDataMap.keySet().toArray(new String[0]);&#10;    }&#10;&#10;    /**&#10;     * Clears all textures from this provider.&#10;     */&#10;    public void clear() {&#10;        textureDataMap.clear();&#10;    }&#10;&#10;    /**&#10;     * Gets the source dimensions of a texture pattern.&#10;     * &#10;     * @param path the texture path&#10;     * @return array with [width, height] or null if texture not found&#10;     */&#10;    public int[] getSourceDimensions(String path) {&#10;        String[] textureData = textureDataMap.get(path);&#10;        if (textureData == null || textureData.length == 0) {&#10;            return null;&#10;        }&#10;        &#10;        int height = textureData.length;&#10;        int width = textureData[0].length();&#10;        return new int[]{width, height};&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>